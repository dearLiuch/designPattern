工厂模式主要用于封装和管理对象的创建，是一种创建型模式。可分为以下三种。
简单工厂模式：
    定义一个具体工厂，根据工厂内部判断逻辑生产同一类所有产品。但若新增一种产品，则需修改工厂内判断逻辑代码，代码需要不断维护；
工厂方法模式：
    定义一个抽象工厂，提供生产同一类产品接口，不负责生产具体产品。
    抽象工厂将生产任务交给不同的具体工厂来创建具体产品。
    这样在简单工厂模式里集中在工厂方法上的压力可以由工厂方法模式里不同的工厂子类来分担。
    当有新的产品产生时，只要新增具体工厂角色、具体产品角色类，就可以被客户端使用，而不必去修改任何已有的代码。
抽象工厂模式：
    上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品如Phone，如果要生成另一种产品PC，应该怎么表示呢？
    提供一个抽象工厂供子类继承。抽象工厂可创建多个不同类的产品，即产品族。



简单工厂模式（举例）
     抽象产品角色（Phone）：⼀般是具体产品继承的⽗类或者实现的接⼝；
     具体产品角色（MiPhone和IPhone）：工厂所创建的具体的产品；
     ⼯⼚类角色(Factory)：简单工厂模式的核⼼，含有⼀定的商业逻辑和判断逻辑，⽤来创建产品；
     客户端(Client)：通过简单工厂模式创建同一类不同产品。
缺点：
如果新增一种产品，需要修改工厂内部判断逻辑方法，添加if判断，改动了原来的代码，违背设计模式开闭原则
因此，引出工厂方法模式



工厂方法模式（举例）：
    抽象工厂角色（Factory）：它是具体工厂角色必须实现的接口或者必须继承的父类；
    具体工厂角色（IPhoneFactory、MiPhoneFactory）：创建具体产品对应的具体工厂；
    抽象产品角色（Phone）：具体产品继承的父类或者实现的接口；
    具体产品角色（IPhone、MiPhone）：具体工厂对应创建的具体产品；
    客户端：通过工厂方法模式创建同一类不同产品。
缺点：工厂方法模式只能创建同一类产品，如都是手机类产品。若想创建一个产品族，则需要使用到抽象工厂模式。


抽象工厂模式（举例）：
    抽象工厂角色（FoodFactory):它是具体工厂角色必须实现的接口或者必须继承的父类，可创建多个不同类产品
    具体工厂角色（KindOneFoodFactory、KindTwoFoodFactory）：具体工厂支持创建多个不同类具体产品
    抽象产品（Fruit、Drink)：具体产品继承的父类或者实现的接口；
    具体产品角色（Apple、Banala）：具体工厂对应创建的具体产品；