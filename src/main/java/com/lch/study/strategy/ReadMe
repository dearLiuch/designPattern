demo2运行方法位于：StudyApplicationTests中test方法

补充知识点：
获取Class对象的三种方式：
1.Class.forName(className) // 要求JVM查找并加载指定的类,会执行该类的静态代码段
2.直接xxx.class，如
    Class cashContextClass = CashContext.class;
    Class moneyClass = double.class;
3. 调用object.getClass()方法获取
    Client client = new Client();
    Class clientClass = client.getClass();


策略模式（举例）：
    封装角色（Context）：上下文封装角色持有抽象策略角色引用，并且调用策略方法;
    抽象策略角色（Strategy）：提供接口或抽象类，定义策略组必须拥有的方法和属性；
    具体策略角色（ConcreteStrategyA、ConcreteStrategyB）：实现抽象策略，定义具体的算法逻辑
    客户端：通过策略模式灵活调用策略


使用场景：
定义了一组算法，不同的算法封装成一个个策略（结合实际业务场景理解）


策略模式优点：
它能将不同的算法逻辑屏蔽掉，在service层业务逻辑会显得非常清晰，清楚每一步在做什么，不会在一个service方法中突然出现一大堆算法逻辑；
比如，销售活动策略，在业务层屏蔽具体销售策略算法，通过封装角色直接调用某种策略；

策略模式缺点：
客户端必须知道所有的策略类，并自行决定选择哪个策略，这就要求客户端必须理解每个策略类的区别。
由于策略模式将每个具体实现的策略单独封装成类，如果备选的策略较多，那么对象的数目就会很多。

